 #Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 # SPDX-License-Identifier: MIT-0
 
 

# ENUMS
enum DataFeedType {
  RSS
  ATOM
}
enum ArticleSummaryType {
  SHORT_SUMMARY
  LONG_SUMMARY
  KEYWORDS
}

enum AuthGranted {
  READ_ONLY,
  SUBSCRIBE,
  MANAGE
}

# TYPES

type Account {
  id: ID!
}

type User {
  id: ID!
  account: Account
}

type Newsletter {
  id: ID!
  account: Account
  title: String
  numberOfDaysToInclude: Int
  subscriberCount: Int
  dataFeedIds: [ID!]
  dataFeeds: [DataFeed]
  isPrivate: Boolean
  createdAt: AWSDateTime
  newsletterIntroPrompt: String
  articleSummaryType: ArticleSummaryType
  newsletterStyle: AWSJSON
  subscribers: [User]
  currentUserSubscribed: Boolean
  authGranted: AuthGranted
  scheduleId: String
}

type Newsletters {
  items: [Newsletter]
  nextToken: String
}

type DataFeed  {
  id: ID!
  account: Account!
  url: String
  feedType: DataFeedType!
  createdAt: AWSDateTime
  enabled: Boolean
  articles: [Article]
  title: String!
  description: String
  summarizationPrompt: String
  articleFilterPrompt: String
  isPrivate: Boolean!
  authGranted: AuthGranted
}

type DataFeeds {
  items: [DataFeed]
  nextToken: String
}

type Publication {
  id: ID!
  newsletterId: String
  account: Account
  createdAt: AWSDateTime
  filePath: String
}

type Publications {
  items: [Publication]
  nextToken: String
}

type Article {
  id: ID!
  dataFeedId: ID!
  dataFeed: DataFeed
  account: Account!
  url: String
  createdAt: AWSDateTime
  title: String!
  providedDescription: String
  providedCategories: String
  publishDate: AWSDateTime
  summarizationPrompt: String
  flaggedContent: Boolean
  keywords: String
  shortSummary: String
  longSummary: String
  authGranted: AuthGranted
}

type Articles {
  items: [Article]!
  nextToken: String
}

type NewsletterSubscriberStats {
  id: ID!
  count: Int
}


# INPUTS
input CreateDataFeedInput {
  url: String!
  title: String!
  description: String
  enabled: Boolean!
  summarizationPrompt: String
  articleFilterPrompt: String
  isPrivate: Boolean
}


input UpdateDataFeedInput {
  id: ID!
  url: String
  enabled: Boolean
  title: String
  description: String
  summarizationPrompt: String
  articleFilterPrompt: String
  isPrivate: Boolean
}

input CreateNewsletterInput {
  title: String!
  numberOfDaysToInclude: Int!
  dataFeeds: [ID!]!
  isPrivate: Boolean
  newsletterIntroPrompt: String
  articleSummaryType: ArticleSummaryType
  newsletterStyle: AWSJSON
}

input UpdateNewsletterInput {
  id: ID!
  title: String
  numberOfDaysToInclude: Int
  dataFeeds: [ID]
  isPrivate: Boolean
  newsletterIntroPrompt: String
  articleSummaryType: String
  newsletterStyle: AWSJSON
}

input ListNewslettersInput {
  includeDiscoverable: Boolean
  includeOwned: Boolean
  includeShared: Boolean 
}

input ListDataFeedsInput {
  includeDiscoverable: Boolean
  includeOwned: Boolean
  includeShared: Boolean
}

input SubscribeToNewsletterInput {
  id: ID!
}

input UnsubscribeFromNewsletterInput {
  id: ID!
}

input ExternalUnsubscribeFromNewsletter {
  id: ID!
  userId: ID!
}

input GetNewsletterSubscriberStatsInput {
  id: ID!
}

input GetNewsletterInput {
  id: ID!
}

input GetDataFeedInput {
  id: ID!
}

input ListPublicationsInput {
  id: ID!
}

input ListArticlesInput {
  id: ID!
}

input GetPublicationInput {
  id: ID!
  newsletterId: ID!
}


input FlagArticleInput {
  id: ID!
  dataFeedId: ID!
  flaggedContent: Boolean!
}

input CheckSubscriptionToNewsletterInput {
  id: ID!
}

input CanUpdateNewsletterInput {
  id: ID!
}

input CanUpdateDataFeedInput {
  id: ID!
}



type Mutation {
  createDataFeed(input: CreateDataFeedInput!): DataFeed @aws_lambda
  createNewsletter(input: CreateNewsletterInput!): Newsletter @aws_lambda
  subscribeToNewsletter(input: SubscribeToNewsletterInput!): Boolean @aws_lambda
  unsubscribeFromNewsletter(input: UnsubscribeFromNewsletterInput): Boolean @aws_lambda
  updateNewsletter(input: UpdateNewsletterInput!): Boolean @aws_lambda
  updateDataFeed(input: UpdateDataFeedInput!): Boolean @aws_lambda
  flagArticle(input: FlagArticleInput!): Boolean @aws_lambda
  externalUnsubscribeFromNewsletter(input: ExternalUnsubscribeFromNewsletter): Boolean @aws_lambda
}

type Query {
  listNewsletters(
    input: ListNewslettersInput
    nextToken: String
    limit: Int
  ): Newsletters @aws_lambda 
  getNewsletter(input: GetNewsletterInput): Newsletter @aws_lambda
  listDataFeeds(
    input: ListDataFeedsInput
    nextToken: String
    limit: Int
  ): DataFeeds @aws_lambda
  getDataFeed(
    input: GetDataFeedInput
  ): DataFeed @aws_lambda 
  listArticles(
    input: ListArticlesInput
    nextToken: String
    limit: Int
  ): Articles @aws_lambda 
  getPublication(input: GetPublicationInput): Publication
    @aws_lambda
  listPublications(
    input: ListPublicationsInput
    nextToken: String
    limit: Int
  ): Publications @aws_lambda
  checkSubscriptionToNewsletter(
    input: CheckSubscriptionToNewsletterInput
  ): Boolean @aws_lambda 
  listUserSubscriptions(nextToken: String, limit: Int): Newsletters
    @aws_lambda
  canUpdateNewsletter(input: CanUpdateNewsletterInput): Boolean @aws_lambda
  canUpdateDataFeed(input: CanUpdateDataFeedInput): Boolean @aws_lambda
  getNewsletterSubscriberStats(input: GetNewsletterSubscriberStatsInput): NewsletterSubscriberStats @aws_lambda
}

schema {
  query: Query
  mutation: Mutation
}
